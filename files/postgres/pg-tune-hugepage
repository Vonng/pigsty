#!/bin/bash
set -euo pipefail
#==============================================================#
# File      :   pg-tune-hugepage
# Desc      :   tune nr_hugepages for postgresql
# Ctime     :   2023-02-23
# Mtime     :   2022-02-23
# Path      :   /pg/bin/pg-tune-hugepage
# Deps      :   psql
# Note      :   run as root, works on PostgreSQL 15+
# License   :   AGPLv3 @ https://pigsty.io/docs/about/license
# Copyright :   2018-2025  Ruohang Feng / Vonng (rh@vonng.com)
#==============================================================#
PROG_NAME="$(basename $0)"
PROG_DIR="$(cd $(dirname $0) && pwd)"
FILE='/etc/sysctl.d/hugepage.conf'


#--------------------------------------------------------------#
# Usage
#--------------------------------------------------------------#
# pg-hugepage-tune
#
# it will query shared_memory_size_in_huge_pages from postgres
# and set parameters to /etc/sysctl.d/hugepage.conf
#   - `vm.nr_hugepages`
#   - `vm.hugetlb_shm_group`
#--------------------------------------------------------------#


#--------------------------------------------------------------#
# Param
#--------------------------------------------------------------#
if [[ "$(whoami)" != "root" ]]; then
    # try access postgres from nr_hugepages
    NR_HUGEPAGE=$(psql -qwAXtc 'show shared_memory_size_in_huge_pages')
else
    NR_HUGEPAGE=$(sudo -iu postgres psql -qwAXtc 'show shared_memory_size_in_huge_pages')
fi

# check if result is acquired. if huge pages are not supported, this will be -1
if [[ -z "${NR_HUGEPAGE}" ]] || [[ ${NR_HUGEPAGE} -lt 0 ]] ; then
    echo "[FAIL] fail to acquire shared_memory_size_in_huge_pages from postgres"
    exit 1
fi

#--------------------------------------------------------------#
# Execute
#--------------------------------------------------------------#
function can_nopass_sudo(){
    local current_user=$(whoami)
    if [[ "${current_user}" == "root" ]]; then
        return 0
    fi
    if sudo -n ls >/dev/null 2>/dev/null; then
        return 0
    fi
    return 1
}

if ! can_nopass_sudo; then
    echo "[FAIL] root or sudo is required to write sysctl parameter"
    echo "[HINT] $ echo vm.nr_hugepages=${NR_HUGEPAGE} > ${FILE}"
    echo "[HINT] $ sysctl -p ${FILE}"
    exit 2
fi

echo "[BEFORE]============================"
cat /proc/meminfo | grep HugePages
sysctl -a | grep vm.nr_hugepages

# write param
DIRECTIVE="vm.nr_hugepages=${NR_HUGEPAGE}"
echo "[EXEC] $ echo $DIRECTIVE > ${FILE}"
sudo bash -c "echo ${DIRECTIVE} > ${FILE}"

# apply change
echo "[HINT] $ sysctl -p ${FILE}"
sudo sysctl -p ${FILE}

gid=$(id -g postgres)
if [[ -n $gid ]]; then
  # Restrict hugepage used by postgres only
  echo "vm.hugetlb_shm_group = $gid" >> ${FILE}
fi

echo "[AFTER]============================"
cat /proc/meminfo | grep -i HugePages
sysctl -a | grep vm.nr_hugepages
sysctl -a | grep vm.hugetlb_shm_group
