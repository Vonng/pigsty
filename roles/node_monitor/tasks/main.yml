---
#--------------------------------------------------------------#
# Register HAProxy to Nginx                     [register_nginx]
#--------------------------------------------------------------#
# nginx are idempotent on multiple meta nodes
- name: register haproxy instance to nginx
  tags: [ haproxy_register, register_nginx ]
  when: haproxy_enabled|bool
  become: yes
  block:

    - name: create nginx config dir for haproxy
      run_once: true
      delegate_to: '{{ item }}'
      with_items: '{{ groups["infra"] }}'
      file: path=/etc/nginx/conf.d/haproxy state=directory owner=root

    # /etc/nginx/conf.d/haproxy/upstream-{{ pg_instance }}.conf
    - name: register haproxy upstream to nginx
      delegate_to: '{{ item }}'
      with_items: '{{ groups["infra"] }}'
      copy:
        dest: /etc/nginx/conf.d/haproxy/upstream-{{ nodename }}.conf
        content: |
          upstream {{ nodename }} {
              server {{ inventory_hostname }}:{{ haproxy_exporter_port }} max_fails=0;
          }

    # /etc/nginx/conf.d/haproxy/location-{{ pg_instance }}.conf
    - name: register haproxy url location to nginx
      delegate_to: '{{ item }}'
      with_items: '{{ groups["infra"] }}'
      copy:
        dest: /etc/nginx/conf.d/haproxy/location-{{ nodename }}.conf
        content: |
          location ^~/{{ nodename }}/ {
              proxy_pass http://{{ nodename }};
              proxy_connect_timeout 1;
          }

    # reload meta node nginx (maybe not appropriate here)
    - name: reload nginx to finish haproxy register
      delegate_to: '{{ item }}'
      run_once: true
      with_items: '{{ groups["infra"] }}'
      systemd: name=nginx state=reloaded enabled=yes daemon_reload=yes


#--------------------------------------------------------------#
# Config node_exporter                    [node_exporter_config]
#--------------------------------------------------------------#
- name: config node_exporter
  tags: [ node_exporter, node_exporter_config ]
  block:

    - name: config node_exporter systemd unit
      copy: src=node_exporter.service dest=/usr/lib/systemd/system/node_exporter.service
    - name: config default node_exporter options
      copy:
        dest: /etc/default/node_exporter
        content: |
          NODE_EXPORTER_OPTS="--web.listen-address=':{{ node_exporter_port }}' --web.telemetry-path='{{ exporter_metrics_path }}' {{ node_exporter_options }}"


#--------------------------------------------------------------#
# Launch node_exporter                    [node_exporter_launch]
#--------------------------------------------------------------#
- name: Launch node_exporter
  tags: [ node_exporter, node_exporter_launch ]
  when: node_exporter_enabled|bool
  block:
    - name: launch node_exporter systemd service
      systemd: name=node_exporter state=restarted enabled=yes daemon_reload=yes
    - name: wait for node_exporter service online
      wait_for: host=127.0.0.1 port={{ node_exporter_port }} state=started timeout=10


#--------------------------------------------------------------#
# Register Node             [node_register, register_prometheus]
#--------------------------------------------------------------#
# /etc/prometheus/targets/node/{{ ip }}.yml
- name: register node as prometheus target
  tags: [ node_register, register_prometheus ]
  ignore_errors: true
  delegate_to: '{{ item }}'
  with_items: '{{ groups["infra"] }}'
  copy:
    dest: /etc/prometheus/targets/node/{{ inventory_hostname }}.yml
    owner: prometheus
    content: |
      # {{ inventory_hostname }}
      - labels: { ip: {{ inventory_hostname }} , ins: {{ nodename }} , cls: {{ node_cluster|default('nodes') }} }
        targets: {% if not node_exporter_enabled|bool and not haproxy_enabled|bool and not promtail_enabled|bool %}[]{% endif %} 

          {% if node_exporter_enabled|bool %}- {{ inventory_hostname }}:{{ node_exporter_port }}{% endif %}
      
          {% if haproxy_enabled|bool %}- {{ inventory_hostname }}:{{ haproxy_exporter_port }}{% endif %}
      
          {% if promtail_enabled|bool %}- {{ inventory_hostname }}:{{ promtail_port }}{% endif %}

          {% if docker_enabled is defined and docker_enabled|bool %}- {{ inventory_hostname }}:9323{% endif %}


- name: register node as blackbox exporter target
  tags: [ node_register, register_prometheus ]
  ignore_errors: true
  delegate_to: '{{ item }}'
  with_items: '{{ groups["infra"] }}'
  copy:
    dest: /etc/prometheus/targets/ping/{{ inventory_hostname }}.yml
    owner: prometheus
    content: |
      # {{ inventory_hostname }}
      - labels: { ip: {{ inventory_hostname }} , ins: {{ nodename }} , cls: {{ node_cluster|default('nodes') }} }
        targets: [ {{inventory_hostname }} ]



#--------------------------------------------------------------#
# Cleanup Promtail                              [promtail_clean]
#--------------------------------------------------------------#
- name: remove promtail positions
  tags: [ promtail, promtail_clean ]
  when: promtail_clean|bool
  file: path={{ promtail_positions }} state=absent


#--------------------------------------------------------------#
# Config Promtail                              [promtail_config]
#--------------------------------------------------------------#
- name: config promtail
  tags: [ promtail, promtail_config ]
  block:
    - name: create /etc/promtail config dir
      file: dest=/etc/promtail state=directory
    - name: render /etc/promtail.yml config
      template: src=promtail.yml.j2 dest=/etc/promtail/config.yml
      vars: { loki_url: "http://{{ infra_portal.loki.endpoint|replace('${admin_ip}', admin_ip) }}/loki/api/v1/push" }
    - name: create promtail systemd service
      copy: src=promtail.service dest=/etc/systemd/system/promtail.service


# NOTICE: The official promtail rpm is tricky to use, since it
# will launch immediately after install, we have to config it
# before install & launch it. So do not install it in node_packages
#--------------------------------------------------------------#
# Install Promtail                            [promtail_install]
#--------------------------------------------------------------#
- name: install promtail via yum
  tags: promtail_install
  ignore_errors: "{{ not promtail_enabled|bool }}"  # ignore errors if not enabled
  block:
    - name: install promtail via yum
      package: name=promtail state=present
    - name: remove promtail /etc/systemd service
      file: dest=/etc/systemd/system/promtail.service state=absent
    - name: create promtail systemd service
      copy: src=promtail.service dest=/usr/lib/systemd/system/promtail.service


#--------------------------------------------------------------#
# Launch Promtail                              [promtail_launch]
#--------------------------------------------------------------#
- name: launch promtail
  tags: [ promtail, promtail_launch ]
  when: promtail_enabled|bool
  block:

    - name: restart promtail systemd service
      systemd: name=promtail state=restarted enabled=yes daemon_reload=yes
    - name: wait for promtail service online
      wait_for: host=127.0.0.1 port={{ promtail_port }} state=started timeout=20


#--------------------------------------------------------------#
# Reload Promtail                              [promtail_reload]
#--------------------------------------------------------------#
#- name: reload promtail systemd service
#  tags: promtail_reload
#  systemd: name=promtail state=restarted enabled=yes daemon_reload=yes
...