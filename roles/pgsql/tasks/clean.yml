---
#--------------------------------------------------------------#
# Check PostgreSQL Exists                             [pg_check]
#--------------------------------------------------------------#
- name: check postgres exists
  tags: pg_check
  block:

    # check node is managed by pigsty by the existence of ca.crt
    - name: check if node is managed by pigsty
      stat: path=/etc/pki/ca.crt
      register: check_ca_crt_result

    # abort if any node is not init by pigsty (TODO, validate use the same CA crt)
    - name: ABORT due to install on unmanaged node
      when: not check_ca_crt_result.stat.exists
      connection: local
      any_errors_fatal: true
      ignore_errors: false
      fail:
        msg: >-
          Abort because the node {{ inventory_hostname }} seems not managed by pigsty, use ./node.yml to init node first.

    # check postgres by listening port
    - name: check postgres exists
      command: 'ss -tp state listening sport = :{{ pg_port }}'
      any_errors_fatal: true
      register: check_pg_port_result
    - name: set pg_exists flag
      connection: local
      set_fact:
        pg_exists: "{{ 'post' in check_pg_port_result.stdout }}"

    # when any running postgres exists, abort play in two cases:
    # 1. pg_safeguard = true   # prevent accidentally purge at all
    # 2. pg_clean = false      # pg_clean=true is required for purging during init
    - name: ABORT due to postgres exists
      connection: local
      when: pg_exists|bool and (pg_safeguard|bool or not pg_clean|bool)
      any_errors_fatal: true
      ignore_errors: false
      fail:
        msg: >-
          Abort because pg instance {{ pg_cluster }}-{{ pg_seq }} @ {{ inventory_hostname }} exists.
           {% if pg_safeguard|bool %}pg_safeguard enabled, please disable it before purging.{% endif %}
           {% if not pg_clean|bool %}pg_clean = false, use -e pg_safeguard=false to override.{% endif %}


#---------------------------------------------------------------
# PURGE PROCEDURE
#---------------------------------------------------------------
# check postgres instance precondition
#  --- empty  ---> clean ---> init
#  --- exist  ^--> [pg_safeguard=true]  ---> abort
#             ^--> [pg_safeguard=false]
#                         ^--> [pg_clean=false] ---> abort
#                         ^--> [pg_clean=true]  ---> purge
#---------------------------------------------------------------


#--------------------------------------------------------------#
# Purge PostgreSQL                                    [pg_purge]
#--------------------------------------------------------------#
# DANGEROUS! remove all postgres data of target machine
# BUT, this is your choice
- name: purge postgres
  tags: pg_purge
  become: yes
  block:

    - name: WARNING, PURGE POSTGRESQL INSTANCE
      # connection: local # leave some time for manual intervention
      when: not pg_safeguard and pg_exists and pg_clean  # DANGEROUS!
      debug:
        msg: "[DANGEROUS] RUNNING PGSQL INSTANCE {{ pg_cluster }}-{{ pg_seq }} @ {{ inventory_hostname }} WILL BE PURGED!"

    - name: stop postgres services
      tags: pg_stop
      shell: |
        # first, gracefully stop related service
        systemctl stop vip-manager
        systemctl stop patroni
        systemctl stop postgres
        systemctl stop pgbouncer
        systemctl stop pg_exporter
        systemctl stop pgbouncer_exporter
        systemctl stop --no-block postgresql
        systemctl disable --no-block postgresql
        {% if os_package|default('rpm') == 'rpm' %}
        rm -rf /usr/lib/systemd/system/postgresql.service
        {% elif os_package|default('rpm') == 'deb' %}
        systemctl stop --no-block postgresql@{{ pg_version|default('17') }}-main
        systemctl disable --no-block postgresql@{{ pg_version|default('17') }}-main
        rm -rf /lib/systemd/system/postgresql@.service /lib/systemd/system/postgresql.service /etc/init.d/postgresql
        systemctl daemon-reload
        {% endif %}

        if ps -u postgres -o pid:1,command | grep -E 'postmaster|postgres:|-D' ; then
            {{ pg_bin_dir }}/pg_ctl -D {{ pg_data }} stop --mode=immediate
        fi
        if ps -u postgres -o pid:1,command | grep -E 'postmaster|postgres:|-D'  ; then
            sleep 2
            ps -u postgres -o pid:1,command | grep -E 'postmaster|postgres:|-D' | awk '{print $1}' | xargs kill -9
        fi
        if ps -u postgres -o pid:1,command | grep -E 'postmaster|postgres:|-D'  | grep checkpointer ; then
            exit 1  # report failure if still alive
        fi
        exit 0
      args: { executable: /bin/bash }

    # when cleanup primary, remove etcd metadata
    - name: remove postgres metadata from etcd
      tags: pg_clean_meta
      ignore_errors: true
      when: pg_role == 'primary'
      delegate_to: '{{ admin_ip }}'
      become: yes
      shell: |
        {% if pg_mode == 'citus' %}
        META_DIR="{{ pg_namespace|default('/pg') }}/{{ pg_shard }}/{{ pg_group }}"
        {% else %}
        META_DIR="{{ pg_namespace|default('/pg') }}/{{ pg_cluster }}"
        {% endif %}

        export ETCDCTL_API=3
        export ETCDCTL_ENDPOINTS="{% for ip in groups['etcd']|sort %}{% if not loop.first %},{% endif %}https://{{ ip }}:{{ etcd_port }}{% endfor %}"
        export ETCDCTL_CACERT=/etc/pki/ca.crt
        export ETCDCTL_CERT=/etc/pki/infra.crt
        export ETCDCTL_KEY=/etc/pki/infra.key
        etcdctl del "${META_DIR}" --prefix=true
        /bin/true
      args: { executable: /bin/bash }

    - name: remove postgres data
      tags: pg_clean_data
      file: path={{ item }} state=absent
      with_items:
        - /pg
        - "{{ pg_fs_main }}/postgres"
        - "{{ pg_fs_bkup }}/postgres"
        - "{{ pg_log_dir }}"
        - "{{ patroni_log_dir }}"
        - "{{ pgbackrest_log_dir }}"
        - "{{ pgbouncer_log_dir }}"
        - /etc/pgbouncer
        - /var/run/pgbouncer

    - name: remove pg_fs_wal/?/pg_wal (if pg_fs_wal defined)
      tags: pg_clean_data
      when: pg_fs_wal | length > 0
      file: path={{ item }} state=absent
      with_items:
        - "{{ pg_fs_wal }}/{{ pg_cluster }}-{{ pg_version }}"
...
