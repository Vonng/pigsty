#!/usr/bin/ansible-playbook
---
#--------------------------------------------------------------#
# patroni restart **all** nodes of pg_cluster at primary
#--------------------------------------------------------------#

- name: patroni restart primary pg_cluster at primary
  tags: [ pg_hugepage, patroni, pg_launch, pt_restart ]
  when: patroni_mode != 'remove' and pg_role == 'primary'
  block:
    # result may be success, but contains 'Failed' message,
    # due to node has multiple ip addresses and got "Failed: ... status code=403, (Access is denied)" for replica
    - name: patroni restart primary {{ pg_cluster }} at primary
      become_user: "{{ dbsu }}"
      vars:
        dbsu: "{{ pg_dbsu|default('postgres') }}"
      args: { executable: /bin/bash }
      shell: |
        /usr/bin/patronictl -c /pg/bin/patroni.yml restart --force {{ pg_cluster }}
      register: patroni_restart_cmd

    - name: set pt_restart_full_succeed
      when:
        - patroni_restart_cmd is defined
        - patroni_restart_cmd.rc == 0
        - patroni_restart_cmd.stdout.find('Failed') == -1
      set_fact:
        pt_restart_full_succeed: true

    - name: print result if failed at primary
      debug:
        msg: |
          rc: {{ patroni_restart_cmd.rc }},
            stdout: "{{ patroni_restart_cmd.stdout_lines  }}",
            stderr: "{{ patroni_restart_cmd.stderr_lines }}"
      when: patroni_restart_cmd is defined and patroni_restart_cmd.rc is defined and patroni_restart_cmd.rc != 0
      changed_when: false

    - name: print result if succeed but contains 'Failed' at primary
      debug:
        var: patroni_restart_cmd.stdout_lines
      when:
        - patroni_restart_cmd is defined
        - patroni_restart_cmd.rc == 0
        - patroni_restart_cmd.stdout.find('Failed') != -1
      changed_when: false

    - name: sleep after patroni restart
      when:
        - patroni_restart_cmd is defined
        - patroni_restart_cmd.rc == 0
        - patroni_restart_cmd.stdout.find('Failed') != -1
      args: { executable: /bin/bash }
      shell: |
        sync; sync;
        sleep 1
      changed_when: false

...
